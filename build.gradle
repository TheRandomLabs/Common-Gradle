import com.github.spotbugs.SpotBugsTask
import net.ltgt.gradle.errorprone.CheckSeverity
import org.apache.tools.ant.filters.ReplaceTokens

def testing = !project.hasProperty("testing") || project.testing
def defaultCompileDependencies = !project.hasProperty("defaultCompileDependencies") ||
		project.defaultCompileDependencies
def runnable = project.hasProperty("mainClass")
def jacocoMinimumInstructionCoverage = project.hasProperty("jacocoMinimumInstructionCoverage") ?
		project.jacocoMinimumInstructionCoverage : 0.9
def jacocoExcludes = project.hasProperty("jacocoExcludes") ? project.jacocoExcludes : []
def registerDefaultMavenPublication = !project.hasProperty("registerDefaultMavenPublication") ||
		project.registerDefaultMavenPublication

buildscript {
	repositories {
		mavenCentral()

		maven {
			url "https://plugins.gradle.org/m2/"
		}

		dependencies {
			classpath "de.undercouch:gradle-download-task:4.0.4"
			classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
			classpath "com.github.spotbugs:spotbugs-gradle-plugin:3.0.0"
			classpath "net.ltgt.gradle:gradle-errorprone-plugin:1.2.1"
		}
	}
}

apply plugin: "java-library"
apply plugin: "idea"
apply plugin: de.undercouch.gradle.tasks.download.DownloadTaskPlugin
apply plugin: net.minecrell.gradle.licenser.Licenser
apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: com.github.spotbugs.SpotBugsPlugin
apply plugin: net.ltgt.gradle.errorprone.ErrorPronePlugin
apply plugin: "maven-publish"

if (testing) {
	apply plugin: "jacoco"
}

repositories {
	mavenCentral()
}

ext {
	guavaVersion = "29.0-jre"
	slf4jVersion = "2.0.0-alpha1"
	log4jVersion = "2.13.3"
	junitVersion = "5.6.2"
	mockitoVersion = "3.3.3"
	checkerQualVersion = "3.4.1"
}

dependencies {
	//The default compile dependencies are Guava and SLF4J.
	if (defaultCompileDependencies) {
		implementation "com.google.guava:guava:${project.guavaVersion}"
		implementation "org.slf4j:slf4j-api:${project.slf4jVersion}"

		//If the project is also runnable, then we include Log4j as an SLF4J implementation.
		if (runnable) {
			implementation "org.slf4j:slf4j-api:${project.slf4jVersion}"
			implementation "org.apache.logging.log4j:log4j-core:${project.log4jVersion}"
			implementation "org.apache.logging.log4j:log4j-slf4j18-impl:${project.log4jVersion}"
		}
	}

	//Testing.
	if (testing) {
		//We enable SLF4J in the test configuration regardless.
		testImplementation "org.slf4j:slf4j-api:${project.slf4jVersion}"
		testRuntimeOnly "org.apache.logging.log4j:log4j-core:${project.log4jVersion}"
		testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j18-impl:${project.log4jVersion}"

		testImplementation "org.junit.jupiter:junit-jupiter-api:${project.junitVersion}"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.junitVersion}"
		testImplementation "org.assertj:assertj-core:3.16.1"
		testImplementation "org.mockito:mockito-core:${project.mockitoVersion}"
		testImplementation "org.mockito:mockito-junit-jupiter:${project.mockitoVersion}"
	}

	compileOnly "org.checkerframework:checker-qual:${project.checkerQualVersion}"
	testCompileOnly "org.checkerframework:checker-qual:${project.checkerQualVersion}"

	//Static code analysis.
	spotbugsPlugins "com.mebigfatguy.sb-contrib:sb-contrib:7.4.7"
	spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1"
	spotbugsPlugins "jp.skypencil.findbugs.slf4j:bug-pattern:1.5.0@jar"

	errorprone "com.google.errorprone:error_prone_core:2.3.4"
	errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"

	annotationProcessor "com.uber.nullaway:nullaway:0.7.10"
}

/* IDEA */

idea.project.vcs = "git"

/* TESTING */

if (testing) {
	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				element = "CLASS"

				limit {
					counter = "INSTRUCTION"
					value = "COVEREDRATIO"
					minimum = jacocoMinimumInstructionCoverage
				}

				excludes = jacocoExcludes
			}
		}
	}

	check.dependsOn jacocoTestCoverageVerification
}

/* DOWNLOAD CONFIGS */

ext.configs = [
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/.editorconfig": ".editorconfig",
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/config/checkstyle/checkstyle.xml": "config/checkstyle/checkstyle.xml",
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/config/pmd.xml": "config/pmd.xml",
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/config/spotbugs-exclude.xml": "config/spotbugs-exclude.xml"
]

gradle.afterProject {
	for (config in configs) {
		download {
			src config.key
			dest config.value
		}
	}
}

/* LICENSER */

license {
	exclude "**/*.xml"
}

//We make all checkLicense<SourceSet> tasks depend on updateLicenses so that all licenses are
//automatically updated.
tasks.matching {
	it.name.startsWith("checkLicense")
}.all {
	it.dependsOn updateLicenses
}

/* STATIC CODE ANALYSIS */

pmd {
	ruleSets = []
	ruleSetConfig = resources.text.fromFile("config/pmd.xml")
}

spotbugs {
	excludeFilter = file("config/spotbugs-exclude.xml")
}

tasks.withType(SpotBugsTask) {
	reports {
		xml.enabled false
		html.enabled true
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:all"

	if (!name.toLowerCase().contains("test")) {
		options.errorprone {
			check("NullAway", CheckSeverity.ERROR)
			option("NullAway:AnnotatedPackages", project.group)
		}
	}
}

/* JAVADOC */

javadoc.options {
	docTitle = windowTitle = "${rootProject.name} ${project.version}"
	links = [
		"https://docs.oracle.com/javase/8/docs/api/",
		"https://checkerframework.org/api/"
	]
}

/* ARTIFACTS */

jar {
	manifest {
		attributes "Automatic-Module-Name": project.group
	}

	from "LICENSE"

	if (runnable) {
		manifest {
			attributes "Main-Class": project.mainClass
		}

		from {
			configurations.runtimeClasspath.collect {
				it.isDirectory() ? it : zipTree(it)
			}
		}
	}
}

task processSource(type: Sync) {
    from sourceSets.main.java
    inputs.property "version", version
    filter(ReplaceTokens, tokens: [VERSION: version])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	archiveClassifier.set("javadoc")
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

if (registerDefaultMavenPublication) {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact sourcesJar
				artifact javadocJar
				from components.java
			}
		}
	}
}
