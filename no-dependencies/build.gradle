import com.github.spotbugs.SpotBugsTask
import net.ltgt.gradle.errorprone.CheckSeverity

buildscript {
	repositories {
		mavenCentral()

		maven {
			url "https://plugins.gradle.org/m2/"
		}

		dependencies {
			classpath "de.undercouch:gradle-download-task:4.0.2"
			classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
			classpath "com.github.spotbugs:spotbugs-gradle-plugin:3.0.0"
			classpath "net.ltgt.gradle:gradle-errorprone-plugin:1.1.1"
		}
	}
}

apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "jacoco"
apply plugin: de.undercouch.gradle.tasks.download.DownloadTaskPlugin
apply plugin: net.minecrell.gradle.licenser.Licenser
apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: com.github.spotbugs.SpotBugsPlugin
apply plugin: net.ltgt.gradle.errorprone.ErrorPronePlugin
apply plugin: "maven-publish"

repositories {
	mavenCentral()
}

ext.slf4jVersion = "2.0.0-alpha1"
ext.log4jVersion = "2.13.0"
ext.junitVersion = "5.6.0-RC1"
ext.mockitoVersion = "3.2.4"

dependencies {
	testImplementation "org.slf4j:slf4j-api:${ext.slf4jVersion}"
	testRuntimeOnly "org.apache.logging.log4j:log4j-core:${ext.log4jVersion}"
	testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j18-impl:${ext.log4jVersion}"

	testImplementation "org.junit.jupiter:junit-jupiter-api:${ext.junitVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${ext.junitVersion}"
	testImplementation "org.assertj:assertj-core:3.14.0"
	testImplementation "org.mockito:mockito-core:${ext.mockitoVersion}"
	testImplementation "org.mockito:mockito-junit-jupiter:${ext.mockitoVersion}"

	spotbugsPlugins "com.mebigfatguy.sb-contrib:sb-contrib:7.4.7"
	spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1"
	spotbugsPlugins "jp.skypencil.findbugs.slf4j:bug-pattern:1.5.0@jar"

	errorprone "com.google.errorprone:error_prone_core:2.3.4"
	errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"

	annotationProcessor "com.uber.nullaway:nullaway:0.7.9"
}

/* IDEA */

idea.project.vcs = "git"

/* TESTING */

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = "CLASS"

			limit {
				counter = "INSTRUCTION"
				value = "COVEREDRATIO"
				minimum = project.ext.jacocoMinimumInstructionCoverage
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification

/* DOWNLOAD CONFIGS */

ext.configs = [
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/.editorconfig": ".editorconfig",
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/config/checkstyle/checkstyle.xml": "config/checkstyle/checkstyle.xml",
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/config/pmd.xml": "config/pmd.xml",
	"https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/master/config/spotbugs-exclude.xml": "config/spotbugs-exclude.xml"
]

gradle.afterProject {
	for (config in configs) {
		download {
			src config.key
			dest config.value
		}
	}
}

/* LICENSER */

license {
	exclude "**/*.xml"
}

//We make all checkLicense<SourceSet> tasks depend on updateLicenses so that all licenses are
//automatically updated.
tasks.matching {
	it.name.startsWith("checkLicense")
}.all {
	it.dependsOn updateLicenses
}

/* STATIC CODE ANALYSIS */

pmd {
	ruleSets = []
	ruleSetConfig = resources.text.fromFile("config/pmd.xml")
}

spotbugs {
	excludeFilter = file("config/spotbugs-exclude.xml")
}

tasks.withType(SpotBugsTask) {
	reports {
		xml.enabled false
		html.enabled true
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:all"

	if (!name.toLowerCase().contains("test")) {
		options.errorprone {
			check("NullAway", CheckSeverity.ERROR)
			option("NullAway:AnnotatedPackages", project.group)
		}
	}
}

/* JAVADOC */

javadoc {
	options.links = [
		"https://docs.oracle.com/javase/8/docs/api/"
	]
}

/* ARTIFACTS */

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	archiveClassifier.set("javadoc")
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		gpr(MavenPublication) {
			artifact sourcesJar
			artifact javadocJar
			from components.java
		}
	}
}
