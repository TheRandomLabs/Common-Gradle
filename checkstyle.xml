<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
		"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
		"https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
	<property name="charset" value="UTF-8"/>
	<property name="fileExtensions" value="java, properties, xml"/>
	<property name="localeLanguage" value="en"/>
	<property name="localeCountry" value="US"/>
	<property name="tabWidth" value="4"/>

	<module name="BeforeExecutionExclusionFileFilter">
		<property name="fileNamePattern" value="module\-info\.java$"/>
	</module>

	<module name="NewlineAtEndOfFile"/>

	<!-- Disallow trailing whitespace. -->
	<module name="RegexpSingleline">
		<property name="format" value="\s+$"/>
		<property name="message" value="Trailing whitespace is disallowed."/>
	</module>

	<!-- Disallow blank line after {. Taken from Fabric! -->
	<module name="RegexpMultiline">
		<property name="format" value="\{[\t ]*\r?\n[\t ]*\r?\n"/>
		<property name="message" value="Blank line after '{' is disallowed."/>
	</module>

	<!-- Disallow blank line before }. Taken from Fabric! -->
	<module name="RegexpMultiline">
		<property name="format" value="\n[\t ]*\r?\n[\t ]*\}"/>
		<property name="message" value="Blank line before '}' is disallowed."/>
	</module>

	<!-- Require blank line before { in the same indentation level. Taken from Fabric! -->
	<module name="RegexpMultiline">
		<!-- Explanation in checkstyle.xml at: https://github.com/FabricMC/fabric -->
		<property name="format" value="(?&lt;=\n)([\t]+)(?:[^/\r\n \t][^\r\n]*|/[^/\r\n][^\r\n]*|[^/\r\n][^\r\n]*(\r?\n\1//[^\r\n]*)+)\r?\n\1(|(if|do|while|for|try)[^\r\n]+)\{[\t ]*\r?\n"/>
		<property name="message" value="Missing blank line before block at same indentation level."/>
	</module>

	<!-- Require blank line after } in the same indentation level. Taken from Fabric! -->
	<module name="RegexpMultiline">
		<!-- Explanation in checkstyle.xml file at: https://github.com/FabricMC/fabric -->
		<property name="format" value="(?&lt;=\n)([\t]+)\}\r?\n\1(?:[^\r\n\}cd]|c[^\r\na]|ca[^\r\ns]|d[^\r\ne]|de[^\r\nf])"/>
		<property name="message" value="Missing blank line after block at same indentation level."/>
	</module>

	<module name="LineLength">
		<property name="max" value="120"/>
		<property name="ignorePattern"
				  value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
	</module>

	<module name="TreeWalker">
		<module name="AvoidStarImport"/>
		<module name="IllegalImport"/>
		<module name="RedundantImport"/>
		<module name="UnusedImports"/>

		<module name="CustomImportOrder">
			<property name="sortImportsInGroupAlphabetically" value="true"/>
			<property name="customImportOrderRules" value="STATIC###STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE"/>
		</module>

		<module name="OuterTypeFilename"/>
		<module name="OneTopLevelClass"/>

		<module name="IllegalTokenText">
			<property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
			<property name="format"
					  value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
			<property name="message"
					  value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
		</module>

		<module name="AvoidEscapedUnicodeCharacters">
			<property name="allowEscapesForControlCharacters" value="true"/>
			<property name="allowByTailComment" value="true"/>
			<property name="allowNonPrintableEscapes" value="true"/>
		</module>

		<module name="NoLineWrap"/>

		<module name="EmptyBlock">
			<property name="option" value="TEXT"/>
			<property name="tokens"
					  value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
		</module>

		<module name="NeedBraces"/>
		<module name="LeftCurly"/>
		<module name="RightCurly">
			<property name="tokens"
					  value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
		</module>

		<module name="ParenPad"/>
		<module name="NoWhitespaceBefore"/>
		<module name="NoWhitespaceAfter"/>
		<module name="WhitespaceAfter"/>
		<module name="WhitespaceAround">
			<property name="allowEmptyConstructors" value="true"/>
			<property name="allowEmptyLambdas" value="true"/>
			<property name="allowEmptyMethods" value="true"/>
			<property name="allowEmptyTypes" value="true"/>
			<property name="allowEmptyLoops" value="true"/>
			<property name="allowEmptyCatches" value="true"/>
			<message key="ws.notFollowed"
					 value="WhitespaceAround: ''{0}'' is not followed by whitespace."/>
			<message key="ws.notPreceded"
					 value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
		</module>
		<module name="SingleSpaceSeparator"/>
		<module name="GenericWhitespace">
			<message key="ws.followed"
					 value="GenericWhitespace ''{0}'' is followed by whitespace."/>
			<message key="ws.preceded"
					 value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
			<message key="ws.illegalFollow"
					 value="GenericWhitespace ''{0}'' should followed by whitespace."/>
			<message key="ws.notPreceded"
					 value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
		</module>
		<module name="CommentsIndentation"/>

		<module name="OneStatementPerLine"/>
		<module name="MultipleVariableDeclarations"/>

		<module name="ArrayTypeStyle"/>
		<module name="DefaultComesLast">
			<property name="skipIfLastAndSharedWithCase" value="true"/>
		</module>
		<module name="MissingSwitchDefault"/>
		<module name="FallThrough"/>
		<module name="SimplifyBooleanExpression"/>
		<module name="SimplifyBooleanReturn"/>
		<module name="StringLiteralEquality"/>

		<module name="ModifierOrder"/>
		<module name="RedundantModifier"/>

		<module name="AnnotationLocation"/>
		<module name="MissingOverride"/>

		<module name="UpperEll"/>

		<module name="EmptyLineSeparator">
			<property name="allowNoEmptyLineBetweenFields" value="true"/>
			<property name="allowMultipleEmptyLines" value="false"/>
		</module>

		<module name="SeparatorWrap">
			<property name="tokens" value="COMMA,SEMI,DOT,ELLIPSIS,AT,ARRAY_DECLARATOR,METHOD_REF"/>
		</module>

		<module name="Indentation">
			<property name="basicOffset" value="4"/>
			<property name="caseIndent" value="0"/>
			<property name="throwsIndent" value="4"/>
			<property name="arrayInitIndent" value="4"/>
			<property name="lineWrappingIndentation" value="8"/>
		</module>

		<module name="PackageDeclaration"/>
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
			<message key="name.invalidPattern"
					 value="Package name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="TypeName">
			<message key="name.invalidPattern"
					 value="Type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="MemberName">
			<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
			<message key="name.invalidPattern"
					 value="Member name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="ParameterName">
			<property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
			<message key="name.invalidPattern"
					 value="Parameter name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="LambdaParameterName">
			<property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
			<message key="name.invalidPattern"
					 value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="CatchParameterName">
			<property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
			<message key="name.invalidPattern"
					 value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="LocalVariableName">
			<property name="tokens" value="VARIABLE_DEF"/>
			<property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
			<message key="name.invalidPattern"
					 value="Local variable name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="ClassTypeParameterName">
			<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Class type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="MethodTypeParameterName">
			<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Method type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="InterfaceTypeParameterName">
			<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Interface type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="MethodName">
			<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
			<message key="name.invalidPattern"
					 value="Method name ''{0}'' must match pattern ''{1}''."/>
		</module>

		<module name="NoFinalizer"/>

		<module name="RegexpSinglelineJava">
			<property name="format" value="^\t* "/>
			<property name="message" value="Indent must use tab characters."/>
		</module>

		<module name="OverloadMethodsDeclarationOrder"/>
		<module name="VariableDeclarationUsageDistance"/>
		<module name="MethodParamPad"/>

		<module name="OperatorWrap">
			<property name="option" value="eol"/>
			<property name="tokens"
					  value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
		</module>

		<module name="NonEmptyAtclauseDescription"/>
		<module name="InvalidJavadocPosition"/>
		<module name="SummaryJavadoc">
			<property name="forbiddenSummaryFragments"
					  value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
		</module>
		<module name="JavadocParagraph"/>
		<module name="JavadocStyle"/>
		<module name="AtclauseOrder">
			<property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
		</module>
		<module name="JavadocMethod">
			<property name="scope" value="private"/>
			<property name="allowedAnnotations" value=""/>
			<property name="allowThrowsTagsForSubclasses" value="true"/>
		</module>
		<module name="MissingJavadocMethod">
			<property name="scope" value="protected"/>
			<property name="allowedAnnotations" value="BeforeAll,Test"/>
		</module>
		<module name="SingleLineJavadoc">
			<property name="ignoreInlineTags" value="false"/>
		</module>

		<module name="EmptyCatchBlock">
			<property name="exceptionVariableName" value="ignored"/>
		</module>

		<module name="CommentsIndentation"/>
	</module>
</module>
